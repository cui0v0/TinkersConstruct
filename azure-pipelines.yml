# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'Ubuntu-latest'

variables:
  revision: $[counter('release-number', 0)]
  artifactName: 'Release'
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
- task: Cache@2
  inputs:
    key: 'gradle | "$(Agent.OS)" | build.gradle | gradle.properties | src/main/resources/META-INF/accesstransformer.cfg'
    restoreKeys: gradle
    path: $(GRADLE_USER_HOME)
  displayName: Gradle build cache

- task: Gradle@2
  displayName: Create Release Build
  inputs:
    workingDirectory: ''
    options: '--build-cache -PCIType=RELEASE'
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'

- task: CopyFiles@2
  displayName: Copy Release build to artifact staging
  inputs:
    sourceFolder: './build/libs/'
    contents: '*.jar'
    targetFolder: $(build.artifactStagingDirectory)
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: '$(artifactName)'
    publishLocation: 'pipeline'
